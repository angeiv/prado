---

- name: "ensure a home for {{ app_name }}"
  become: true
  file:
    path: "{{ app_home }}"
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    state: directory
    recurse: yes
  register: app_home_created

- name: install ssl system requirements
  become: true
  yum:
    name: "{{ item }}"
    state: present
  with_items: "{{ ssl_requirements }}"
  when: app_use_ssl

- name: enable EPEL
  become: true
  yum:
    name: epel-release
    state: present

- name: install system packages
  become: true
  yum:
    name: "{{ item }}"
    state: present
  with_items: "{{ system_packages }}"

- name: Create a virtualenv with latest pip.
  pip:
    name: pip
    virtualenv: "{{ app_home }}"
    extra_args: '--upgrade'

- name: "pip+git install {{ app_name }} into virtualenv"
  pip:
    name: 'git+https://github.com/ceph/{{ app_name }}@{{ branch }}#egg={{ app_name }}'
    virtualenv: "{{ app_home }}"
    editable: yes
  changed_when: False

# this will only be used if the credentials where not passed in explicitly over
# the command line as --extra-vars and the app_home directory was not created
# (as in a new deployment). Once the app is deployed once, the api/pass should
# stay consistent
- name: generate pseudo-random password for basic http auth
  shell: python -c "exec 'import os; print os.urandom(30).encode(\'base64\')[:${length}]'"
  register: api_key_generated
  changed_when: false
  when: (api_key is not defined) and (api_user is not defined)

- name: create the prod api credentials file
  template:
    src: prod_api_creds.py.j2
    dest: "{{ app_home }}/src/{{ app_name }}/configs/prod_api_creds.py"
  when: (api_key is defined or api_user is defined) or
        (app_home_created is defined and app_home_created|changed) or
        (reset_key is defined)
  notify: restart app

- name: create the prod config file
  template:
    src: prod.py.j2
    dest: "{{ app_home }}/src/{{ app_name }}/configs/prod.py"
  notify: restart app

- name: clone ceph-build into prado/public
  git:
    repo: "https://github.com/ceph/ceph-build.git"
    dest: "{{ app_home }}/src/{{ app_name }}/public/ceph-build"
    version: master
    update: yes
    force: yes

- name: install python requirements in virtualenv
  pip:
    requirements: "{{ app_home }}/src/{{ app_name }}/requirements.txt"
    state: present
    virtualenv: "{{ app_home }}"
  notify: restart app

- include: circus.yml

# nginx sets an selinux boolean setting, which requires that selinux be
# "enforcing" or "permissive", not "disabled".
- name: set selinux to permissive
  selinux:
    policy: targeted
    state: permissive

- include: nginx.yml
